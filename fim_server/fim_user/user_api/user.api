type UserInfoRequest {
	UserId uint `header:"User-Id"`
	Role   int8 `header:"Role"`
}

type AuthQuestion {
	Problem1 *string `json:"problem1"`
	Problem2 *string `json:"problem2"`
	Problem3 *string `json:"problem3"`
	Answer1  *string `json:"answer1"`
	Answer2  *string `json:"answer2"`
	Answer3  *string `json:"answer3"`
}

type UserInfoResponse {
	UserId        uint    `json:"userId"`
	Name          string  `json:"name"`
	Sign          string  `json:"sign"`
	Avatar        string  `json:"avatar"`
	RecallMessage *string `gorm:"size:32" json:"recallMessage"` // 撤回消息内容
	FriendOnline  bool    `json:"friendOnline"` // 好友上线
	Sound         bool    `json:"sound"` // 好友上线声音
	SecureLink    bool    `json:"secureLink"` // 安全链接
	SavePassword  bool    `json:"savePassword"` // 保存密码
	// 防骚扰
	SearchUser   int8          `json:"searchUser"` // 别人查找到你的方式
	Auth         int8          `json:"auth"` // 好友验证
	AuthQuestion *AuthQuestion `json:"authQuestion"` // 验证问题
}

type UserUpdateRequest {
	UserId        uint    `json:"userId"`
	Name          *string `json:"name,optional"`
	Sign          *string `json:"sign,optional"`
	Avatar        *string `json:"avatar,optional"`
	RecallMessage *string `gorm:"size:32" json:"recallMessage,optional"` // 撤回消息内容
	FriendOnline  *bool   `json:"friendOnline,optional"` // 好友上线
	Sound         *bool   `json:"sound,optional"` // 好友上线声音
	SecureLink    *bool   `json:"secureLink,optional"` // 安全链接
	SavePassword  *bool   `json:"savePassword,optional"` // 保存密码
	// 防骚扰
	SearchUser   *int8         `json:"searchUser,optional"` // 别人查找到你的方式
	Auth         *int8         `json:"auth,optional"` // 好友验证
	AuthQuestion *AuthQuestion `json:"authQuestion,optional"` // 验证问题
}

type UserUpdateResponse {}

// cd fim_user/user_api
// goctl api go -api user.api -dir . --home ../../template
// go run user.go
service user {
	@handler UserInfo
	get /api/user/user_info (UserInfoRequest) returns (UserInfoResponse) // 用户信息

	@handler UserInfoUpdate
	put /api/user/user_info (UserUpdateRequest) returns (UserUpdateResponse) // 用户信息修改
}

