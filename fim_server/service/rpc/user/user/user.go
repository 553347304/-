// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package user

import (
	"context"

	"fim_server/service/rpc/user/user_rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FriendInfo             = user_rpc.FriendInfo
	FriendListRequest      = user_rpc.FriendListRequest
	FriendListResponse     = user_rpc.FriendListResponse
	IsFriendRequest        = user_rpc.IsFriendRequest
	IsFriendResponse       = user_rpc.IsFriendResponse
	UserBaseInfoRequest    = user_rpc.UserBaseInfoRequest
	UserBaseInfoResponse   = user_rpc.UserBaseInfoResponse
	UserCreateRequest      = user_rpc.UserCreateRequest
	UserCreateResponse     = user_rpc.UserCreateResponse
	UserInfo               = user_rpc.UserInfo
	UserInfoRequest        = user_rpc.UserInfoRequest
	UserInfoResponse       = user_rpc.UserInfoResponse
	UserListInfoRequest    = user_rpc.UserListInfoRequest
	UserListInfoResponse   = user_rpc.UserListInfoResponse
	UserOnlineListRequest  = user_rpc.UserOnlineListRequest
	UserOnlineListResponse = user_rpc.UserOnlineListResponse

	User interface {
		UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UserBaseInfo(ctx context.Context, in *UserBaseInfoRequest, opts ...grpc.CallOption) (*UserBaseInfoResponse, error)
		UserListInfo(ctx context.Context, in *UserListInfoRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error)
		IsFriend(ctx context.Context, in *IsFriendRequest, opts ...grpc.CallOption) (*IsFriendResponse, error)
		FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error)
		UserOnlineList(ctx context.Context, in *UserOnlineListRequest, opts ...grpc.CallOption) (*UserOnlineListResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.UserCreate(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUser) UserBaseInfo(ctx context.Context, in *UserBaseInfoRequest, opts ...grpc.CallOption) (*UserBaseInfoResponse, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.UserBaseInfo(ctx, in, opts...)
}

func (m *defaultUser) UserListInfo(ctx context.Context, in *UserListInfoRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.UserListInfo(ctx, in, opts...)
}

func (m *defaultUser) IsFriend(ctx context.Context, in *IsFriendRequest, opts ...grpc.CallOption) (*IsFriendResponse, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.IsFriend(ctx, in, opts...)
}

func (m *defaultUser) FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.FriendList(ctx, in, opts...)
}

func (m *defaultUser) UserOnlineList(ctx context.Context, in *UserOnlineListRequest, opts ...grpc.CallOption) (*UserOnlineListResponse, error) {
	client := user_rpc.NewUserClient(m.cli.Conn())
	return client.UserOnlineList(ctx, in, opts...)
}
