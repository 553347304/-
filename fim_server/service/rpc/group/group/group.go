// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: group.proto

package group

import (
	"context"

	"fim_server/service/rpc/group/group_rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	IsInGroupMemberRequest  = group_rpc.IsInGroupMemberRequest
	IsInGroupMemberResponse = group_rpc.IsInGroupMemberResponse

	Group interface {
		IsInGroupMember(ctx context.Context, in *IsInGroupMemberRequest, opts ...grpc.CallOption) (*IsInGroupMemberResponse, error)
	}

	defaultGroup struct {
		cli zrpc.Client
	}
)

func NewGroup(cli zrpc.Client) Group {
	return &defaultGroup{
		cli: cli,
	}
}

func (m *defaultGroup) IsInGroupMember(ctx context.Context, in *IsInGroupMemberRequest, opts ...grpc.CallOption) (*IsInGroupMemberResponse, error) {
	client := group_rpc.NewGroupClient(m.cli.Conn())
	return client.IsInGroupMember(ctx, in, opts...)
}
