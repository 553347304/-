syntax = "v1"

info (
	title:   "type title here"
	desc:    "type desc here"
	author:  "type author here"
	email:   "type email here"
	version: "type version here"
)

type (
	Empty  {}
)

type (
	LogListRequest {
		Page  int `form:"page,optional"`
		Limit int `form:"limit,optional"`
		Key   int `form:"key,optional"`
	}
	LogInfoResponse {
		ID           uint   `json:"id"`
		CreatedAt    string `json:"createdAt"`
		LogType      int8   `json:"logType"` // 日志类型  2 操作日志 3 运行日志
		IP           string `json:"ip"`
		Addr         string `json:"addr"`
		UserID       uint   `json:"userID"`
		UserNickname string `json:"userNickname"`
		UserAvatar   string `json:"userAvatar"`
		Level        string `json:"level"`
		Title        string `json:"title"`
		Content      string `json:"content"` // 日志详情
		Service      string `json:"service"` // 服务  记录微服务的名称
		IsRead       bool   `json:"isRead"`
	}
	LogListResponse {
		List  []LogInfoResponse `json:"list"`
		Count int               `json:"count"`
	}
)

type (
	LogReadRequest {
		ID uint `path:"id"`
	}
	LogRemoveRequest {
		IdList []uint `json:"idList"`
	}
)

@server (
	middleware: AdminMiddleware
)
service log {
	@handler LogList
	get /api/log/logs (LogListRequest) returns (LogListResponse) // 日志列表

	@handler LogRead
	get /api/log/logs/:id (LogReadRequest) returns (Empty) // 日志读取

	@handler LogRemove
	delete /api/log/logs (LogRemoveRequest) returns (Empty) // 日志删除
}

